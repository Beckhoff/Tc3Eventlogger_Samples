///////////////////////////////////////////////////////////////////////////////
// ListenerModule.h
#pragma once

#include "PublisherListenerInterfaces.h"

class CListenerModule 
	: public ITComObject
	, public ITcADI
	, public ITcWatchSource
///<AutoGeneratedContent id="InheritanceList">
	, public ITcCyclic
	, public ITcAlarmListener
	, public ITcMessageListener
///</AutoGeneratedContent>
{
public:
	DECLARE_IUNKNOWN()
	DECLARE_IPERSIST_LIB()
	DECLARE_ITCOMOBJECT_LOCKOP()
	DECLARE_ITCADI()
	DECLARE_ITCWATCHSOURCE()
	DECLARE_OBJPARAWATCH_MAP()
	DECLARE_OBJDATAAREA_MAP()

	CListenerModule();
	virtual	~CListenerModule();


///<AutoGeneratedContent id="InterfaceMembers">
	// ITcCyclic
	virtual HRESULT TCOMAPI CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context);

	// ITcAlarmListener
	virtual HRESULT TCOMAPI OnAlarmRaised(ITcEvent* ipEvent);
	virtual HRESULT TCOMAPI OnAlarmCleared(ITcEvent* ipEvent);
	virtual HRESULT TCOMAPI OnAlarmConfirmed(ITcEvent* ipEvent);
	virtual HRESULT TCOMAPI OnAlarmDisposed(ITcEvent* ipEvent);

	// ITcMessageListener
	virtual HRESULT TCOMAPI OnMessageSent(ITcEvent* ipEvent);

///</AutoGeneratedContent>

protected:
	DECLARE_ITCOMOBJECT_SETSTATE();

	HRESULT AddModuleToCaller();
	VOID RemoveModuleFromCaller();

	// Tracing
	CTcTrace m_Trace;

///<AutoGeneratedContent id="Members">
	TcTraceLevel m_TraceLevelMax;
	ListenerModuleParameter m_Parameter;
	ListenerModuleInputs m_Inputs;
	ListenerModuleOutputs m_Outputs;
	ITcCyclicCallerInfoPtr m_spCyclicCaller;
///</AutoGeneratedContent>

	// TODO: Custom variable
	UINT m_counter;

	ITcEventLoggerPtr m_spEventLogger;
	ITcEventFilterConfigPtr m_spMessageFilterConfig;
	ITcEventFilterConfigPtr m_spAlarmFilterConfig;

};
