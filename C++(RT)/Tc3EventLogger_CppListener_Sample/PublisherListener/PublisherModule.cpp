///////////////////////////////////////////////////////////////////////////////
// PublisherModule.cpp
#include "TcPch.h"
#pragma hdrstop

#include "PublisherModule.h"
#include "PublisherListenerVersion.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// CPublisherModule
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CPublisherModule
BEGIN_INTERFACE_MAP(CPublisherModule)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
///</AutoGeneratedContent>
END_INTERFACE_MAP()


IMPLEMENT_IPERSIST_LIB(CPublisherModule, VID_PublisherListener, CID_PublisherListenerCPublisherModule)
IMPLEMENT_ITCOMOBJECT(CPublisherModule)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CPublisherModule)
IMPLEMENT_ITCADI(CPublisherModule)
IMPLEMENT_ITCWATCHSOURCE(CPublisherModule)


///////////////////////////////////////////////////////////////////////////////
// Set parameters of CPublisherModule 
BEGIN_SETOBJPARA_MAP(CPublisherModule)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_VALUE(PID_PublisherModuleParameter, m_Parameter)
	SETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CPublisherModule 
BEGIN_GETOBJPARA_MAP(CPublisherModule)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_VALUE(PID_PublisherModuleParameter, m_Parameter)
	GETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CPublisherModule
BEGIN_OBJPARAWATCH_MAP(CPublisherModule)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CPublisherModule
BEGIN_OBJDATAAREA_MAP(CPublisherModule)
///<AutoGeneratedContent id="ObjectDataAreaMap">
	OBJDATAAREA_VALUE(ADI_PublisherModuleInputs, m_Inputs)
	OBJDATAAREA_VALUE(ADI_PublisherModuleOutputs, m_Outputs)
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
CPublisherModule::CPublisherModule()
	: m_Trace(m_TraceLevelMax, m_spSrv)
	, m_counter(0)
{
///<AutoGeneratedContent id="MemberInitialization">
	m_TraceLevelMax = tlAlways;
	memset(&m_Parameter, 0, sizeof(m_Parameter));
	memset(&m_Inputs, 0, sizeof(m_Inputs));
	memset(&m_Outputs, 0, sizeof(m_Outputs));
///</AutoGeneratedContent>
}

///////////////////////////////////////////////////////////////////////////////
CPublisherModule::~CPublisherModule() 
{
}


///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CPublisherModule)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CPublisherModule::SetObjStatePS(PTComInitDataHdr pInitData)
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);

	// TODO: Add initialization code

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CPublisherModule::SetObjStateSO()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	// TODO: Add any additional initialization

	m_spEventLogger.SetOID(OID_TCEVENTLOGGER);
	hr = FAILED(hr) ? hr : m_spSrv->TcQuerySmartObjectInterface(m_spEventLogger);
	hr = FAILED(hr) ? hr : m_spEventLogger->CreateAlarm(TcEvents::MyCppEventClass::MyCppAlarm.uuidEventClass, TcEvents::MyCppEventClass::MyCppAlarm.nEventId, TcEvents::MyCppEventClass::MyCppAlarm.eSeverity, TRUE, &TcSourceInfo("EventLogger CPP Sample"), &m_spAlarm);
	hr = FAILED(hr) ? hr : m_spEventLogger->CreateMessage(TcEvents::MyCppEventClass::MyCppMessage.uuidEventClass, TcEvents::MyCppEventClass::MyCppMessage.nEventId, TcEvents::MyCppEventClass::MyCppMessage.eSeverity, &TcSourceInfo("EventLogger CPP Sample"), &m_spMessage);
	// If following call is successful the CycleUpdate method will be called, 
	// possibly even before method has been left.
	hr = FAILED(hr) ? hr : AddModuleToCaller(); 

	// Cleanup if transition failed at some stage
	if ( FAILED(hr) )
	{
		RemoveModuleFromCaller(); 
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CPublisherModule::SetObjStateOS()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;

	RemoveModuleFromCaller(); 

	// TODO: Add any additional deinitialization

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CPublisherModule::SetObjStateSP()
{
	HRESULT hr = S_OK;
	m_Trace.Log(tlVerbose, FENTERA);

	// TODO: Add deinitialization code
	m_spAlarm = NULL;
	m_spMessage = NULL;
	m_spEventLogger = NULL;
	
	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///<AutoGeneratedContent id="ImplementationOf_ITcCyclic">
HRESULT CPublisherModule::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{
	HRESULT hr = S_OK;

	//append a Json created by a Json Sax Writer
	if (m_Inputs.bAddJsonToMessage)
	{
		m_Inputs.bAddJsonToMessage = FALSE;
		m_spMessage->SetJsonAttribute("{\"key\":\"value\"}");
		m_spAlarm->SetJsonAttribute("{\"key\":\"value\"}");
	}

	if (m_Inputs.bClearJsonFromMessage)
	{
		m_Inputs.bClearJsonFromMessage = FALSE;
		m_spMessage->SetJsonAttribute("");
		m_spAlarm->SetJsonAttribute("");
	}

	// TODO: Replace the sample with your cyclic code
	if (m_Inputs.bSendMessage)
	{
		m_Inputs.bSendMessage = FALSE;
		//With Platform v140 / VS2015: SendMessage(TcEvents::MyCppEventClass::MyCppMessage, "some arguments"); //VS2015 / v140 only 
		hr = m_spMessage->Send(0);
	}
	if (m_Inputs.bRaiseAlarm)
	{
		m_Inputs.bRaiseAlarm = FALSE;
		m_spAlarm->Raise(0);
	}

	if (m_Inputs.bClearAlarm)
	{
		m_Inputs.bClearAlarm = FALSE;
		m_spAlarm->Clear(0, FALSE);
	}

	if (m_Inputs.bConfirmAlarm)
	{
		m_Inputs.bConfirmAlarm = FALSE;
		m_spAlarm->Confirm(0);
	}


	return hr;
}
///</AutoGeneratedContent>

///////////////////////////////////////////////////////////////////////////////
HRESULT CPublisherModule::AddModuleToCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	if ( m_spCyclicCaller.HasOID() )
	{
		if ( SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spCyclicCaller)) )
		{
			if ( FAILED(hr = m_spCyclicCaller->AddModule(m_spCyclicCaller, THIS_CAST(ITcCyclic))) )
			{
				m_spCyclicCaller = NULL;
			}
		}
	}
	else
	{
		hr = ADS_E_INVALIDOBJID; 
		SUCCEEDED_DBGT(hr, "Invalid OID specified for caller task");
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
VOID CPublisherModule::RemoveModuleFromCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	if ( m_spCyclicCaller )
	{
		m_spCyclicCaller->RemoveModule(m_spCyclicCaller);
	}
	m_spCyclicCaller	= NULL;

	m_Trace.Log(tlVerbose, FLEAVEA);
}

